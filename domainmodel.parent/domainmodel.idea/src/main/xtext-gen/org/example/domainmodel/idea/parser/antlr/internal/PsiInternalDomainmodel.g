/*
 * generated by Xtext 2.9.1
 */
grammar PsiInternalDomainmodel;

options {
	superClass=AbstractPsiAntlrParser;
}

@lexer::header {
package org.example.domainmodel.idea.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.example.domainmodel.idea.parser.antlr.internal;

import org.eclipse.xtext.idea.parser.AbstractPsiAntlrParser;
import org.example.domainmodel.idea.lang.DomainmodelElementTypeProvider;
import org.eclipse.xtext.idea.parser.TokenTypeProvider;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.example.domainmodel.services.DomainmodelGrammarAccess;

import com.intellij.lang.PsiBuilder;
}

@parser::members {

	protected DomainmodelGrammarAccess grammarAccess;

	protected DomainmodelElementTypeProvider elementTypeProvider;

	public PsiInternalDomainmodelParser(PsiBuilder builder, TokenStream input, DomainmodelElementTypeProvider elementTypeProvider, DomainmodelGrammarAccess grammarAccess) {
		this(input);
		setPsiBuilder(builder);
    	this.grammarAccess = grammarAccess;
		this.elementTypeProvider = elementTypeProvider;
	}

	@Override
	protected String getFirstRuleName() {
		return "Domainmodel";
	}

}

//Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getDomainmodelElementType()); }
	iv_ruleDomainmodel=ruleDomainmodel
	{ $current=$iv_ruleDomainmodel.current; }
	EOF;

// Rule Domainmodel
ruleDomainmodel returns [Boolean current=false]
:
	(
		(
			{
				markComposite(elementTypeProvider.getDomainmodel_ElementsAbstractElementParserRuleCall_0ElementType());
			}
			lv_elements_0_0=ruleAbstractElement
			{
				doneComposite();
				if(!$current) {
					associateWithSemanticElement();
					$current = true;
				}
			}
		)
	)*
;

//Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getPackageDeclarationElementType()); }
	iv_rulePackageDeclaration=rulePackageDeclaration
	{ $current=$iv_rulePackageDeclaration.current; }
	EOF;

// Rule PackageDeclaration
rulePackageDeclaration returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getPackageDeclaration_PackageKeyword_0ElementType());
		}
		otherlv_0='package'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getPackageDeclaration_NameQualifiedNameParserRuleCall_1_0ElementType());
				}
				lv_name_1_0=ruleQualifiedName
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getPackageDeclaration_LeftCurlyBracketKeyword_2ElementType());
		}
		otherlv_2='{'
		{
			doneLeaf(otherlv_2);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getPackageDeclaration_ElementsAbstractElementParserRuleCall_3_0ElementType());
				}
				lv_elements_3_0=ruleAbstractElement
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		{
			markLeaf(elementTypeProvider.getPackageDeclaration_RightCurlyBracketKeyword_4ElementType());
		}
		otherlv_4='}'
		{
			doneLeaf(otherlv_4);
		}
	)
;

//Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getAbstractElementElementType()); }
	iv_ruleAbstractElement=ruleAbstractElement
	{ $current=$iv_ruleAbstractElement.current; }
	EOF;

// Rule AbstractElement
ruleAbstractElement returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getAbstractElement_PackageDeclarationParserRuleCall_0ElementType());
		}
		this_PackageDeclaration_0=rulePackageDeclaration
		{
			$current = $this_PackageDeclaration_0.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getAbstractElement_TypeParserRuleCall_1ElementType());
		}
		this_Type_1=ruleType
		{
			$current = $this_Type_1.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getAbstractElement_ImportParserRuleCall_2ElementType());
		}
		this_Import_2=ruleImport
		{
			$current = $this_Import_2.current;
			doneComposite();
		}
	)
;

//Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getQualifiedNameElementType()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current; }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getQualifiedName_IDTerminalRuleCall_0ElementType());
		}
		this_ID_0=RULE_ID
		{
			doneLeaf(this_ID_0);
		}
		(
			{
				markLeaf(elementTypeProvider.getQualifiedName_FullStopKeyword_1_0ElementType());
			}
			kw='.'
			{
				doneLeaf(kw);
			}
			{
				markLeaf(elementTypeProvider.getQualifiedName_IDTerminalRuleCall_1_1ElementType());
			}
			this_ID_2=RULE_ID
			{
				doneLeaf(this_ID_2);
			}
		)*
	)
;

//Entry rule entryRuleImport
entryRuleImport returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getImportElementType()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getImport_ImportKeyword_0ElementType());
		}
		otherlv_0='import'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getImport_ImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0ElementType());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)
	)
;

//Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getQualifiedNameWithWildcardElementType()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current; }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getQualifiedNameWithWildcard_QualifiedNameParserRuleCall_0ElementType());
		}
		ruleQualifiedName
		{
			doneComposite();
		}
		(
			{
				markLeaf(elementTypeProvider.getQualifiedNameWithWildcard_FullStopAsteriskKeyword_1ElementType());
			}
			kw='.*'
			{
				doneLeaf(kw);
			}
		)?
	)
;

//Entry rule entryRuleType
entryRuleType returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getTypeElementType()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [Boolean current=false]
:
	(
		{
			markComposite(elementTypeProvider.getType_DataTypeParserRuleCall_0ElementType());
		}
		this_DataType_0=ruleDataType
		{
			$current = $this_DataType_0.current;
			doneComposite();
		}
		    |
		{
			markComposite(elementTypeProvider.getType_EntityParserRuleCall_1ElementType());
		}
		this_Entity_1=ruleEntity
		{
			$current = $this_Entity_1.current;
			doneComposite();
		}
	)
;

//Entry rule entryRuleDataType
entryRuleDataType returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getDataTypeElementType()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getDataType_DatatypeKeyword_0ElementType());
		}
		otherlv_0='datatype'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getDataType_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
	)
;

//Entry rule entryRuleEntity
entryRuleEntity returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getEntityElementType()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [Boolean current=false]
:
	(
		{
			markLeaf(elementTypeProvider.getEntity_EntityKeyword_0ElementType());
		}
		otherlv_0='entity'
		{
			doneLeaf(otherlv_0);
		}
		(
			(
				{
					markLeaf(elementTypeProvider.getEntity_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		(
			{
				markLeaf(elementTypeProvider.getEntity_ExtendsKeyword_2_0ElementType());
			}
			otherlv_2='extends'
			{
				doneLeaf(otherlv_2);
			}
			(
				(
					{
						if (!$current) {
							associateWithSemanticElement();
							$current = true;
						}
					}
					{
						markComposite(elementTypeProvider.getEntity_SuperTypeEntityCrossReference_2_1_0ElementType());
					}
					ruleQualifiedName
					{
						doneComposite();
					}
				)
			)
		)?
		{
			markLeaf(elementTypeProvider.getEntity_LeftCurlyBracketKeyword_3ElementType());
		}
		otherlv_4='{'
		{
			doneLeaf(otherlv_4);
		}
		(
			(
				{
					markComposite(elementTypeProvider.getEntity_FeaturesFeatureParserRuleCall_4_0ElementType());
				}
				lv_features_5_0=ruleFeature
				{
					doneComposite();
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)*
		{
			markLeaf(elementTypeProvider.getEntity_RightCurlyBracketKeyword_5ElementType());
		}
		otherlv_6='}'
		{
			doneLeaf(otherlv_6);
		}
	)
;

//Entry rule entryRuleFeature
entryRuleFeature returns [Boolean current=false]:
	{ markComposite(elementTypeProvider.getFeatureElementType()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [Boolean current=false]
:
	(
		(
			(
				{
					markLeaf(elementTypeProvider.getFeature_ManyManyKeyword_0_0ElementType());
				}
				lv_many_0_0='many'
				{
					doneLeaf(lv_many_0_0);
				}
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
			)
		)?
		(
			(
				{
					markLeaf(elementTypeProvider.getFeature_NameIDTerminalRuleCall_1_0ElementType());
				}
				lv_name_1_0=RULE_ID
				{
					if(!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					doneLeaf(lv_name_1_0);
				}
			)
		)
		{
			markLeaf(elementTypeProvider.getFeature_ColonKeyword_2ElementType());
		}
		otherlv_2=':'
		{
			doneLeaf(otherlv_2);
		}
		(
			(
				{
					if (!$current) {
						associateWithSemanticElement();
						$current = true;
					}
				}
				{
					markComposite(elementTypeProvider.getFeature_TypeTypeCrossReference_3_0ElementType());
				}
				ruleQualifiedName
				{
					doneComposite();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
